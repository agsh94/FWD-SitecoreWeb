<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore>
        <api>
            <GraphQL>
                <endpoints>
                    <!-- Define an endpoint. The XML element name ('master') should be unique. The 'url' is what you'll use to access the endpoint. -->
                    <master url="/sitecore/api/graph/childContents" type="Sitecore.Services.GraphQL.Hosting.GraphQLEndpoint, Sitecore.Services.GraphQL.NetFxHost" resolve="true">
                        <url>$(url)</url>

                        <schema hint="list:AddSchemaProvider">
                            <!--
                              Defaults are defined in Sitecore.Services.GraphQL.Content.config 
                              Note: to customize, copy the default here and replace the node,
                              e.g. <content type="Sitecore.Services.GraphQL.Content.ContentSchemaProvider, Sitecore.Services.GraphQL.Content">...</content>

                              It is a best practice to only add relevant templates and operations to your content schemas.
                            -->
                            
                            <ChildContent type="FWD.Foundation.GraphQL.SchemaProviders.ChildContentSchemaProvider, FWD.Foundation.GraphQL">
                                <templates type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardTemplatePredicate, Sitecore.Services.GraphQL.Content">
                                    <database>context</database>
                                    <paths hint="list:AddIncludedPath">
                                        <foundation>/sitecore/templates/Foundation</foundation>
                                        <feature>/sitecore/templates/Feature</feature>
                                        <project>/sitecore/templates/Project</project>
                                    </paths>
                                    <fieldFilter type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardFieldFilter, Sitecore.Services.GraphQL.Content">
                                        <exclusions hint="raw:AddFilter">
                                            <!-- 
                                                Remove system fields from the GraphQL types in the strongly typed API (e.g. __Layout)
                                                Wildcards are allowed.
                                            -->
                                            <exclude name="__*" />
                                            <!--
                                                You can also exclude fields from the schema specifically by field ID
                                            <exclude fieldId="{8FB875EB-3AD3-44FF-87E1-998370CC3199}" />-->
                                        </exclusions>
                                    </fieldFilter>
                                </templates>

                                <!-- 
                                    Define the GraphQL root object for the schema (queries, mutations, and subscriptions)
                                    You may use `resolve=true` to activate dependency injection on root fields.
                                    All root fields must inherit from FieldType (EventStreamFieldType for subscriptions)
                                    Fields may optionally implement IContentSchemaRootFieldType to get a Database instance (automatic property is expected)
                                -->
                                <queries hint="raw:AddQuery">
                                    <query name="item" type="Sitecore.Services.GraphQL.Content.Queries.ItemQuery, Sitecore.Services.GraphQL.Content" />
                                    <query name="search" type="Sitecore.Services.GraphQL.Content.Queries.SearchQuery, Sitecore.Services.GraphQL.Content" />
                                </queries>

                                <fieldTypeMapping ref="/sitecore/api/GraphQL/defaults/content/fieldTypeMappings/standardTypeMapping" />
                            </ChildContent>
                        </schema>

                        <!-- 
                          Determines the security of the service. Defaults are defined in Sitecore.Services.GraphQL.config. 'publicService' allows anonymous access, but requires passing an SSC API key. 
                          'systemService' requires Sitecore authentication cookies to be passed.
                        -->
                        <security ref="/sitecore/api/GraphQL/defaults/security/publicService" />

                        <!-- 
                          Determines how performance is logged for the service. Defaults are defined in Sitecore.Services.GraphQL.config
                        -->
                        <performance ref="/sitecore/api/GraphQL/defaults/performance/standard" />

                        <!--
                            Cache improves the query performance by caching parsed queries.
                            It is also possible to implement query whitelisting by implementing an authoritative query cache;
                            WhitelistingGraphQLQueryCache is an example of this, capturing queries to files in open mode and allowing only captured queries in whitelist mode.
                        -->
                        <cache type="Sitecore.Services.GraphQL.Hosting.QueryTransformation.Caching.GraphQLQueryCache, Sitecore.Services.GraphQL.NetFxHost">
                            <param desc="name">$(url)</param>
                            <param desc="maxSize">10MB</param>
                        </cache>

                        <!-- 
                            Extenders allow modifying schema types after they are created by a schema provider but before they are added to the final schema.
                            This is useful when you want to _extend_ a generated schema, for example to add external API
                            data onto the item API, or to add in custom internal data (e.g. custom layout data to power an app)
                            without having to directly modify a schema provider.

                            Extenders must derive from SchemaExtender.

                            Extender example: <myExtender type="My.Class, My.Assembly" resolve="true" />
                        -->
                        <extenders hint="list:AddExtender">
                        </extenders>
                    </master>
                </endpoints>
            </GraphQL>
        </api>
    </sitecore>
</configuration>